package com.github.morulay.shiro.aad;

import static com.github.morulay.shiro.aad.AadOpenIdAuthenticationFilter.ID_TOKEN_COOKIE_TEMPLATE;
import static com.github.morulay.shiro.aad.AadUtils.toAbsoluteUri;
import static com.github.morulay.shiro.session.CookieRunAsManager.RUN_AS_COOKIE_TEMPLATE;
import static java.lang.String.format;
import static org.apache.shiro.web.util.WebUtils.toHttp;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.subject.Subject;
import org.apache.shiro.web.servlet.AdviceFilter;
import org.apache.shiro.web.servlet.Cookie;
import org.apache.shiro.web.util.WebUtils;

/**
 * In addition to executing {@link Subject#logout()} makes <a
 * href="https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-protocols-oidc#send-a-sign-out-request">
 * sign-out from Microsoft Identity Platform</a> redirecting at the end to post logout URI if
 * provided.
 */
@SuppressWarnings("java:S110") // Parents come from external library
public class AadLogoutFilter extends AdviceFilter {

  private String authority;
  private String tenant;
  private String postLogoutUri;

  /**
   * @param authority the Microsoft authority instance base URI, e.g. {@code
   *     https://login.microsoftonline.com}
   * @param tenant the name of the tenant
   * @param postLogoutUri the URI that the user is redirected to after successfully signing out. If
   *     not provided, the user is shown a generic message that's generated by the Microsoft
   *     identity platform endpoint
   */
  public AadLogoutFilter(String authority, String tenant, String postLogoutUri) {
    this.authority = authority;
    this.tenant = tenant;
    this.postLogoutUri = postLogoutUri;
  }

  @Override
  protected boolean preHandle(ServletRequest request, ServletResponse response) throws IOException {
    Subject subject = SecurityUtils.getSubject();
    subject.logout();

    HttpServletRequest httpRequest = toHttp(request);
    HttpServletResponse httpResponse = toHttp(response);
    removeCookie(ID_TOKEN_COOKIE_TEMPLATE, httpRequest, httpResponse);
    removeCookie(RUN_AS_COOKIE_TEMPLATE, httpRequest, httpResponse);
    issueRedirect(httpRequest, httpResponse);
    return false;
  }

  private void removeCookie(
      Cookie cookie, HttpServletRequest httpRequest, HttpServletResponse httpResponse) {
    String value = cookie.readValue(httpRequest, httpResponse);
    if (value != null) {
      cookie.removeFrom(httpRequest, httpResponse);
    }
  }

  protected void issueRedirect(HttpServletRequest request, HttpServletResponse response)
      throws IOException {
    String redirectUri = format("%s/%s/oauth2/v2.0/logout", authority, tenant);
    if (postLogoutUri == null) {
      WebUtils.issueRedirect(request, response, redirectUri);
      return;
    }

    Map<String, String> params = new HashMap<>();
    params.put("post_logout_redirect_uri", toAbsoluteUri(request, postLogoutUri));
    WebUtils.issueRedirect(request, response, redirectUri, params);
  }
}
